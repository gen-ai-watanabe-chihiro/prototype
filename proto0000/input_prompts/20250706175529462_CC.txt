/init ultrathink

以下の技術スタックと要件でWEBアプリケーションのコーディングをお願いします。
【技術スタック】
- バックエンド: Python (FastAPI推奨)
- フロントエンド: TypeScript + React
- データベース: PostgreSQL
- 実行環境: Windows 11 WSL2 Ubuntu + Docker Engine
- 動作環境: Windows 11 Google Chrome
- 生成AIのAPI：Azure OpenAI

【機能要件】
1. ユーザー認証（ログイン/ログアウト）
2. メニュー画面（ダッシュボード）

セキュリティやベストプラクティスも考慮してください。
【注意事項】
データベースを使用する際はsqliteは使わず、必ずPostgreSQLを使用してください。
作成するファイルには以下の内容をコメントアウトして最上部に日本語で必ず記載してください。
ただし、コメントアウトできない形式のファイルの場合は不要です。

  -------------------------------------------------
  ・ファイル名：[ファイル名]
  ・ファイル内容：[ファイル内容]
  ・作成日時：yyyy/mm/dd hh:mi:ss  Claude Code
  -------------------------------------------------

又、更新するファイルには、以下の内容を上部のコメントアウトされた行の次の行へ日本語で必ず記載してください。
ただしコメントアウトできない形式のファイルの場合は不要です。

  -------------------------------------------------
  ・更新日時：yyyy/mm/dd hh:mi:ss  更新者：Claude Code
  ・更新内容：[更新内容]
  -------------------------------------------------

尚、ターミナルの出力は全て日本語で記載をお願いします。

要求された内容を全て対応できているかどうかは
必ず修正箇所を検証する単体テスト、
修正箇所の関連機能を含めた機能を検証する結合テスト、
既存機能への影響がないことを含めシステム全体を検証する総合テスト、
要求された内容を満たしていることを検証する運用テスト
の順に4工程に分けてテストしてください。
問題がなければ最初からテスト完了までユーザに続行を確認せずに実施してください。
テストがNGであった場合は原因を調査し修正を実施し、テスト項目を見直した上で
再度単体テスト、結合テスト、総合テスト、運用テストを再度全て実施してください。
又、修正した箇所に限らず修正していない箇所でエラーや警告があった場合も、
そのエラーや警告の調査・修正を実施し、テスト項目を見直した上で
再度単体テスト、結合テスト、総合テスト、運用テストを再度全て実施してください。
画面テストを実施する際はユーザ/パスワードは「testAI/testAI00!」を使ってください。

問題なければ、作業フォルダに関してのみgitと差分のあるフォルダ・ファイルを日本語コメントでコミットしてください。
ただし、pushは絶対にしないでください。
